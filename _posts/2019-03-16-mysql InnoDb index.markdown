---
layout:         post
title:     		mysql 索引
author:     	YY
tag:            git
subtitle:    	
excerpt_separator: ""
dataset:    /projectors/data.json
---
<h2>什么是索引</h2>
<hr>
<h3>&emsp;&emsp;一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样.索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据,这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。</h3>


<h4><font color='###000FF'>hash表:</font></h4>
<h4>以键值对的形式存储,像redis，mongodb等数据库就是以键值对的形式存储元素的。</h4>
<h4><font color='###000FF'>数组：</font></h4><h4>以下标的形式存储元素,像集合中的Arraylist就是以数组存储元素的,以下标访问元素虽然非常快,但是添加删除的时候需要位移元素,所以以数组存储元素只适合存储不需要修改的元素。</h4>
<h4><font color='###000FF'>搜索树：</font></h4><h4>以树行结构存储元素,建立相应的索引可以快速的查询到元素</h4>
<h2>mysql索引结构</h2>
<hr>
<h3>&emsp;&emsp;mysql InnoDb引擎是采用的B+树结构来建立索引,为什么要采用B+树？ 因为数据库访问时最耗时的操作就是磁盘IO,而对于树行结构的存储来说,每一层的访问就是一次磁盘IO,所以树的高度越低,则访问次数越少,时间越短,
如果采用B树(每一个节点都只有两个子节点),则树的高度相比于B+树会高出几个数量级,对于大数据量来说,仅仅一个查询语句性能差异就可能是几十倍甚至更多,而B+树相比B树就是每一层不止有两个节点.
而是n个节点。采用B+树可以大大降低树的高度,也就减少了磁盘访问的次数。从而提高的访问效率。</h3>
<h2><font color='red'>索引的缺点：</font></h2>
<hr>
<h3>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。

建立索引会占用磁盘空间的索引文件。</h3>

<hr>
<h2>聚簇索引和非聚簇索引</h2>

<h4>&emsp;&emsp;MyISAM引擎是采用的非聚簇索引,数据与索引是分别存放在不同的地方,主键索引的B+tree上的叶子节点上存储的并不是数据,而是数据的地址。所以主键索引和辅助索引唯一的区别就是主键索引必须是唯一的.</h4>
<h4>&emsp;&emsp;InnoDb引擎是采用的聚簇索引,对于常用的查询如果是通过主键来查询,则直接通过主键的B+tree来查询到对应的叶子节点,叶子节点中就存储了数据和索引,如果是通过辅助索引(普通索引、唯一索引、复合索引)查询,
则是通过辅助索引对应的B-tree查询到对应的叶子节点,而这个叶子节点中存储的是主键索引对应的key值,所以通过辅助索引查询需要二次查询才能查询到需要的数据。</h4>

<h3><font color='#4B0082'>聚簇索引</font></h3>
<h4>&emsp;&emsp;聚簇索引的数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的。聚簇索引要比非聚簇索引查询效率高很多。
聚集索引这种主+辅索引的好处是，当发生数据行移动或者页分裂时，辅助索引树不需要更新，因为辅助索引树存储的是主索引的主键关键字，而不是数据具体的物理地址。</h4>
<h3><font color='#4B0082'>非聚簇索引</font></h3>
<h4>&emsp;&emsp;非聚集索引，类似于图书的附录，那个专业术语出现在哪个章节，这些专业术语是有顺序的，但是出现的位置是没有顺序的。每个表只能有一个聚簇索引，因为一个表中的记录只能以一种物理顺序存放。
但是，一个表可以有不止一个非聚簇索引。</h4>











